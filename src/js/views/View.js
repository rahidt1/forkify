// import icons from '../../img/icons.svg'; //Parcel 1
import { mark } from 'regenerator-runtime';
import icons from 'url:../../img/icons.svg'; //Parcel 2

export default class View {
  _data;

  render(data, renderMarkup = true) {
    // If there is no data or there is data (which is an array) but empty
    if (!data || (Array.isArray(data) && data.length === 0))
      return this.renderError();

    this._data = data;
    const markup = this._generateMarkup();

    // When we dont want to render directly, but only want to get the markup text generated by  _generateMarkup() method
    if (!renderMarkup) return markup;

    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  update(data) {
    // If there is no data or there is data (which is an array) but empty
    if (!data || (Array.isArray(data) && data.length === 0)) return;

    this._data = data;
    const newMarkup = this._generateMarkup();

    // Convert markup string to DOM object
    const newDOM = document.createRange().createContextualFragment(newMarkup);

    // DOM -> NodeList -> Array
    const newElements = Array.from(newDOM.querySelectorAll('*'));
    const currElements = Array.from(this._parentElement.querySelectorAll('*'));

    newElements.forEach((newEl, i) => {
      const currEl = currElements[i];

      // Updates changed Text
      // If content of new_element & current_element is not equal and
      // content of new_element is text (and not empty text)
      if (
        !newEl.isEqualNode(currEl) &&
        newEl.firstChild?.nodeValue.trim() !== ''
      ) {
        currEl.textContent = newEl.textContent;
      }

      // Updates changed attributes
      // Set the attributes coming from new_element to current_element
      if (!newEl.isEqualNode(currEl)) {
        Array.from(newEl.attributes).forEach(attr =>
          currEl.setAttribute(attr.name, attr.value)
        );
      }
    });
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  renderSpinner() {
    const markup = `
    <div class="spinner">
          <svg>
            <use href="${icons}#icon-loader"></use>
          </svg>
    </div>
  `;

    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError(message = this._errorMessage) {
    const markup = `
      <div class="error">
            <div>
              <svg>
                <use href="${icons}#icon-alert-triangle"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
    `;

    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage(message = this._message) {
    const markup = `
      <div class="message">
            <div>
              <svg>
                <use href="${icons}_icon-smile"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
    `;

    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
}
